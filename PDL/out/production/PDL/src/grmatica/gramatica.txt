Terminales = { int boolean string , if return id input let while print function entera cad ( ) { } == = %= ; + ! true false eof }

NoTerminales = { S B T F G H N M D K I L A X R P J Y V Z }

Axioma = S

Producciones = {
S -> B S
S -> F S
S -> eof
B -> K
B -> if ( R ) D
B -> let id T ;
B -> while ( R ) { M }
T -> int
T -> string
T -> boolean
F -> function id G ( H ) { M }
G -> T
G -> lambda
H -> T id N
H -> lambda
N -> lambda
N -> , T id N
M -> B M
M -> lambda
D -> { M }
D -> K
K -> return X ;
K -> print ( R ) ;
K -> input id  ;
K -> id  I
I -> ( L ) ;
I -> = R ;
I -> %= R ;
L -> R A
L -> lambda
A -> , R A
A -> lambda
X -> R
X -> lambda
R -> J P
P -> == J P
P -> lambda
J -> V Y
Y -> + V Y
Y -> lambda
V -> id Z
V -> ( R )
V -> entera
V -> true
V -> false
V -> ! id Z
V -> cad
Z -> ( L )
Z -> lambda
}